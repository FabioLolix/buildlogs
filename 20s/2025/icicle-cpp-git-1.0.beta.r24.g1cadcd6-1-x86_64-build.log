    Updating crates.io index
    Updating git repository `https://github.com/icicle-emu/icicle-emu`
 Downloading crates ...
  Downloaded cranelift v0.113.1
  Downloaded addr2line v0.24.2
  Downloaded autocfg v1.4.0
  Downloaded adler2 v2.0.0
  Downloaded cfg-if v1.0.0
  Downloaded base64 v0.21.7
  Downloaded equivalent v1.0.2
  Downloaded bitflags v2.9.0
  Downloaded cranelift-entity v0.113.1
  Downloaded anyhow v1.0.97
  Downloaded foldhash v0.1.5
  Downloaded lazy_static v1.5.0
  Downloaded ihex v3.0.0
  Downloaded cranelift-control v0.113.1
  Downloaded cranelift-codegen-shared v0.113.1
  Downloaded cranelift-frontend v0.113.1
  Downloaded arbitrary v1.4.1
  Downloaded ahash v0.8.11
  Downloaded cranelift-native v0.113.1
  Downloaded wasmtime-versioned-export-macros v26.0.1
  Downloaded cranelift-bitset v0.113.1
  Downloaded wasmtime-jit-debug v26.0.1
  Downloaded errno v0.3.10
  Downloaded pkg-config v0.3.32
  Downloaded stable_deref_trait v1.2.0
  Downloaded memoffset v0.9.1
  Downloaded cranelift-module v0.113.1
  Downloaded region v3.0.2
  Downloaded fallible-iterator v0.3.0
  Downloaded serde-xml-rs v0.6.0
  Downloaded tracing-log v0.2.0
  Downloaded slice-group-by v0.3.1
  Downloaded wasmtime-jit-icache-coherence v26.0.1
  Downloaded typed-arena v2.0.2
  Downloaded shlex v1.3.0
  Downloaded static_assertions v1.1.0
  Downloaded rustc-hash v2.1.1
  Downloaded thiserror v1.0.69
  Downloaded twox-hash v1.6.3
  Downloaded thiserror-impl v1.0.69
  Downloaded version_check v0.9.5
  Downloaded cranelift-jit v0.113.1
  Downloaded bincode v1.3.3
  Downloaded cranelift-bforest v0.113.1
  Downloaded rustc-demangle v0.1.24
  Downloaded pin-project-lite v0.2.16
  Downloaded nu-ansi-term v0.46.0
  Downloaded target-lexicon v0.12.16
  Downloaded once_cell v1.21.3
  Downloaded memmap2 v0.9.5
  Downloaded smallvec v1.14.0
  Downloaded thread_local v1.1.8
  Downloaded quote v1.0.40
  Downloaded zstd v0.13.3
  Downloaded bitflags v1.3.2
  Downloaded zstd-safe v7.2.4
  Downloaded tracing-attributes v0.1.28
  Downloaded crc32fast v1.4.2
  Downloaded proc-macro2 v1.0.94
  Downloaded jobserver v0.1.33
  Downloaded cpp_demangle v0.4.4
  Downloaded log v0.4.27
  Downloaded getrandom v0.2.15
  Downloaded miniz_oxide v0.8.5
  Downloaded ron v0.8.1
  Downloaded overload v0.1.1
  Downloaded unicode-ident v1.0.18
  Downloaded xml-rs v0.8.25
  Downloaded bytemuck v1.22.0
  Downloaded indexmap v1.9.3
  Downloaded half v2.5.0
  Downloaded sharded-slab v0.1.7
  Downloaded serde_derive v1.0.219
  Downloaded ruzstd v0.7.3
  Downloaded tracing-core v0.1.33
  Downloaded serde v1.0.219
  Downloaded cranelift-codegen-meta v0.113.1
  Downloaded cranelift-isle v0.113.1
  Downloaded flate2 v1.1.1
  Downloaded indexmap v2.8.0
  Downloaded tracing v0.1.41
  Downloaded memchr v2.7.4
  Downloaded bumpalo v3.17.0
  Downloaded cc v1.2.20
  Downloaded hashbrown v0.12.3
  Downloaded regalloc2 v0.10.2
  Downloaded hashbrown v0.14.5
  Downloaded hashbrown v0.15.2
  Downloaded zerocopy v0.7.35
  Downloaded tracing-subscriber v0.3.19
  Downloaded gimli v0.31.1
  Downloaded syn v2.0.100
  Downloaded object v0.36.7
  Downloaded bstr v1.11.3
  Downloaded rustix v0.38.44
  Downloaded zstd-sys v2.0.15+zstd.1.5.7
  Downloaded libc v0.2.171
  Downloaded cranelift-codegen v0.113.1
  Downloaded linux-raw-sys v0.4.15
   Compiling libc v0.2.171
   Compiling cfg-if v1.0.0
   Compiling proc-macro2 v1.0.94
   Compiling unicode-ident v1.0.18
   Compiling once_cell v1.21.3
   Compiling foldhash v0.1.5
   Compiling version_check v0.9.5
   Compiling equivalent v1.0.2
   Compiling serde v1.0.219
   Compiling log v0.4.27
   Compiling zerocopy v0.7.35
   Compiling smallvec v1.14.0
   Compiling target-lexicon v0.12.16
   Compiling fallible-iterator v0.3.0
   Compiling stable_deref_trait v1.2.0
   Compiling cranelift-isle v0.113.1
   Compiling cranelift-codegen-shared v0.113.1
   Compiling cranelift-bitset v0.113.1
   Compiling anyhow v1.0.97
   Compiling rustc-hash v2.1.1
   Compiling adler2 v2.0.0
   Compiling static_assertions v1.1.0
   Compiling arbitrary v1.4.1
   Compiling slice-group-by v0.3.1
   Compiling crc32fast v1.4.2
   Compiling autocfg v1.4.0
   Compiling bumpalo v3.17.0
   Compiling cranelift-codegen-meta v0.113.1
   Compiling hashbrown v0.15.2
   Compiling twox-hash v1.6.3
   Compiling miniz_oxide v0.8.5
   Compiling cranelift-entity v0.113.1
   Compiling tracing-core v0.1.33
   Compiling object v0.36.7
   Compiling memchr v2.7.4
   Compiling shlex v1.3.0
   Compiling cpp_demangle v0.4.4
   Compiling pkg-config v0.3.32
   Compiling thiserror v1.0.69
   Compiling sleigh-parse v0.3.0 (https://github.com/icicle-emu/icicle-emu#6e9fd3e3)
   Compiling ruzstd v0.7.3
   Compiling ahash v0.8.11
   Compiling cranelift-bforest v0.113.1
   Compiling pin-project-lite v0.2.16
   Compiling pcode v0.2.0 (https://github.com/icicle-emu/icicle-emu#6e9fd3e3)
   Compiling rustc-demangle v0.1.24
   Compiling rustix v0.38.44
   Compiling typed-arena v2.0.2
   Compiling flate2 v1.1.1
   Compiling memoffset v0.9.1
   Compiling half v2.5.0
   Compiling linux-raw-sys v0.4.15
   Compiling bytemuck v1.22.0
   Compiling quote v1.0.40
   Compiling indexmap v2.8.0
   Compiling bitflags v1.3.2
   Compiling xml-rs v0.8.25
   Compiling cranelift-control v0.113.1
   Compiling syn v2.0.100
   Compiling icicle-linux v0.1.0 (https://github.com/icicle-emu/icicle-emu#6e9fd3e3)
   Compiling zstd-safe v7.2.4
   Compiling bstr v1.11.3
   Compiling indexmap v1.9.3
   Compiling overload v0.1.1
   Compiling sleigh-runtime v0.1.0 (https://github.com/icicle-emu/icicle-emu#6e9fd3e3)
   Compiling pcode v0.2.0 (/build/icicle-cpp-git/src/icicle-cpp/src/sleigh/pcode)
   Compiling base64 v0.21.7
   Compiling sleigh-parse v0.3.0 (/build/icicle-cpp-git/src/icicle-cpp/src/sleigh/sleigh-parse)
   Compiling lazy_static v1.5.0
   Compiling nu-ansi-term v0.46.0
   Compiling sharded-slab v0.1.7
   Compiling tracing-log v0.2.0
   Compiling thread_local v1.1.8
   Compiling gimli v0.31.1
   Compiling ihex v3.0.0
   Compiling hashbrown v0.12.3
   Compiling jobserver v0.1.33
   Compiling tracing-subscriber v0.3.19
   Compiling getrandom v0.2.15
   Compiling memmap2 v0.9.5
   Compiling cc v1.2.20
   Compiling wasmtime-jit-icache-coherence v26.0.1
   Compiling region v3.0.2
   Compiling sleigh-runtime v0.1.0 (/build/icicle-cpp-git/src/icicle-cpp/src/sleigh/sleigh-runtime)
   Compiling hashbrown v0.14.5
   Compiling cranelift-codegen v0.113.1
   Compiling regalloc2 v0.10.2
   Compiling zstd-sys v2.0.15+zstd.1.5.7
   Compiling serde_derive v1.0.219
   Compiling tracing-attributes v0.1.28
   Compiling thiserror-impl v1.0.69
   Compiling wasmtime-versioned-export-macros v26.0.1
   Compiling addr2line v0.24.2
   Compiling zstd v0.13.3
   Compiling tracing v0.1.41
   Compiling icicle-mem v0.3.0 (https://github.com/icicle-emu/icicle-emu#6e9fd3e3)
   Compiling bitflags v2.9.0
   Compiling serde-xml-rs v0.6.0
   Compiling bincode v1.3.3
   Compiling icicle-cpu v0.1.0 (https://github.com/icicle-emu/icicle-emu#6e9fd3e3)
   Compiling ron v0.8.1
   Compiling sleigh-compile v0.3.0 (https://github.com/icicle-emu/icicle-emu#6e9fd3e3)
   Compiling sleigh-compile v0.3.0 (/build/icicle-cpp-git/src/icicle-cpp/src/sleigh/sleigh-compile)
   Compiling wasmtime-jit-debug v26.0.1
   Compiling cranelift-native v0.113.1
   Compiling cranelift-module v0.113.1
   Compiling cranelift-frontend v0.113.1
   Compiling cranelift-jit v0.113.1
   Compiling cranelift v0.113.1
   Compiling icicle-jit v0.2.0 (https://github.com/icicle-emu/icicle-emu#6e9fd3e3)
   Compiling icicle-vm v0.2.0 (https://github.com/icicle-emu/icicle-emu#6e9fd3e3)
   Compiling icicle v0.1.0 (/build/icicle-cpp-git/src/icicle-cpp/src)
warning: unused import: `std::fs::File`
 --> lib.rs:5:5
  |
5 | use std::fs::File;
  |     ^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `Read` and `Write`
 --> lib.rs:6:15
  |
6 | use std::io::{Read, Write};
  |               ^^^^  ^^^^^

warning: unused import: `MemoryMapping`
 --> lib.rs:7:69
  |
7 | use icicle_cpu::mem::{Mapping, perm, Mmu, ReadAfterHook, WriteHook, MemoryMapping};
  |                                                                     ^^^^^^^^^^^^^

warning: unused variable: `err`
   --> lib.rs:719:13
    |
719 |         Err(err) => {
    |             ^^^ help: if this is intentional, prefix it with an underscore: `_err`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `err`
   --> lib.rs:796:13
    |
796 |         Err(err) => {
    |             ^^^ help: if this is intentional, prefix it with an underscore: `_err`

warning: unused variable: `err`
   --> lib.rs:810:13
    |
810 |         Err(err) => {
    |             ^^^ help: if this is intentional, prefix it with an underscore: `_err`

warning: unused variable: `err`
   --> lib.rs:824:13
    |
824 |         Err(err) => {
    |             ^^^ help: if this is intentional, prefix it with an underscore: `_err`

warning: unused variable: `err`
   --> lib.rs:845:13
    |
845 |         Err(err) => {
    |             ^^^ help: if this is intentional, prefix it with an underscore: `_err`

warning: unused variable: `err`
   --> lib.rs:860:13
    |
860 |         Err(err) => {
    |             ^^^ help: if this is intentional, prefix it with an underscore: `_err`

warning: unused variable: `err`
   --> lib.rs:893:13
    |
893 |         Err(err) => {
    |             ^^^ help: if this is intentional, prefix it with an underscore: `_err`

warning: unused variable: `err`
   --> lib.rs:919:13
    |
919 |         Err(err) => {
    |             ^^^ help: if this is intentional, prefix it with an underscore: `_err`

warning: unused variable: `err`
    --> lib.rs:1023:13
     |
1023 |         Err(err) => {
     |             ^^^ help: if this is intentional, prefix it with an underscore: `_err`

warning: unused variable: `e`
    --> lib.rs:1170:13
     |
1170 |         Err(e) => {
     |             ^ help: if this is intentional, prefix it with an underscore: `_e`

warning: unnecessary `unsafe` block
    --> lib.rs:1799:13
     |
1799 |             unsafe {
     |             ^^^^^^ unnecessary `unsafe` block
     |
     = note: `#[warn(unused_unsafe)]` on by default

warning: unused variable: `data`
    --> lib.rs:1828:38
     |
1828 | extern "C" fn default_log_write_hook(data: *mut c_void, name: *const c_char, address: u64, size: u8, value: u64) {
     |                                      ^^^^ help: if this is intentional, prefix it with an underscore: `_data`

warning: unused variable: `data`
    --> lib.rs:1840:37
     |
1840 | extern "C" fn default_log_regs_hook(data: *mut c_void, name: *const c_char, address: u64, num_regs: usize, reg_names: *const *const c_cha...
     |                                     ^^^^ help: if this is intentional, prefix it with an underscore: `_data`

warning: unnecessary `unsafe` block
    --> lib.rs:2828:27
     |
2828 |         let regions_ptr = unsafe { icicle_mem_list_mapped(vm as *const _ as *mut Icicle, &mut region_count as *mut usize) };
     |                           ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
    --> lib.rs:2848:35
     |
2848 |                 let content_ptr = unsafe { 
     |                                   ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
    --> lib.rs:2864:21
     |
2864 |                     unsafe { icicle_free_buffer(content_ptr, content_size) };
     |                     ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
    --> lib.rs:2880:13
     |
2880 |             unsafe { icicle_mem_list_mapped_free(regions_ptr, region_count) };
     |             ^^^^^^ unnecessary `unsafe` block

warning: unused variable: `log_level`
    --> lib.rs:3105:5
     |
3105 |     log_level: c_int
     |     ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_log_level`

warning: field `architecture` is never read
   --> lib.rs:300:5
    |
299 | pub struct Icicle {
    |            ------ field in this struct
300 |     architecture: String,
    |     ^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated function `deserialize` is never used
    --> lib.rs:2996:8
     |
2786 | impl SerializableVmState {
     | ------------------------ associated function in this implementation
...
2996 |     fn deserialize(data: &[u8]) -> Result<Self, String> {
     |        ^^^^^^^^^^^

warning: constant `LOG_NONE` is never used
    --> lib.rs:3025:7
     |
3025 | const LOG_NONE: i32 = 0;
     |       ^^^^^^^^

warning: constant `LOG_ERRORS` is never used
    --> lib.rs:3026:7
     |
3026 | const LOG_ERRORS: i32 = 1;
     |       ^^^^^^^^^^

warning: constant `LOG_VERBOSE` is never used
    --> lib.rs:3027:7
     |
3027 | const LOG_VERBOSE: i32 = 2;
     |       ^^^^^^^^^^^

warning: unused return value of `Box::<T>::from_raw` that must be used
   --> lib.rs:728:18
    |
728 |         unsafe { Box::from_raw(ptr); }
    |                  ^^^^^^^^^^^^^^^^^^
    |
    = note: call `drop(Box::from_raw(ptr))` if you intend to drop the `Box`
    = note: `#[warn(unused_must_use)]` on by default
help: use `let _ = ...` to ignore the resulting value
    |
728 |         unsafe { let _ = Box::from_raw(ptr); }
    |                  +++++++

warning: unused return value of `Box::<T>::from_raw` that must be used
    --> lib.rs:1152:18
     |
1152 |         unsafe { Box::from_raw(env); }
     |                  ^^^^^^^^^^^^^^^^^^
     |
     = note: call `drop(Box::from_raw(ptr))` if you intend to drop the `Box`
help: use `let _ = ...` to ignore the resulting value
     |
1152 |         unsafe { let _ = Box::from_raw(env); }
     |                  +++++++

warning: unused return value of `Box::<T>::from_raw` that must be used
    --> lib.rs:1417:13
     |
1417 |             Box::from_raw(snapshot.regs);
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: call `drop(Box::from_raw(ptr))` if you intend to drop the `Box`
help: use `let _ = ...` to ignore the resulting value
     |
1417 |             let _ = Box::from_raw(snapshot.regs);
     |             +++++++

warning: unused return value of `Box::<T>::from_raw` that must be used
    --> lib.rs:1418:13
     |
1418 |             Box::from_raw(snapshot.shadow_stack);
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: call `drop(Box::from_raw(ptr))` if you intend to drop the `Box`
help: use `let _ = ...` to ignore the resulting value
     |
1418 |             let _ = Box::from_raw(snapshot.shadow_stack);
     |             +++++++

warning: unused return value of `Box::<T>::from_raw` that must be used
    --> lib.rs:1419:13
     |
1419 |             Box::from_raw(snapshot.pending_exception);
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: call `drop(Box::from_raw(ptr))` if you intend to drop the `Box`
help: use `let _ = ...` to ignore the resulting value
     |
1419 |             let _ = Box::from_raw(snapshot.pending_exception);
     |             +++++++

warning: unused return value of `Box::<T>::from_raw` that must be used
    --> lib.rs:1480:13
     |
1480 |             Box::from_raw(snapshot.mem);
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: call `drop(Box::from_raw(ptr))` if you intend to drop the `Box`
help: use `let _ = ...` to ignore the resulting value
     |
1480 |             let _ = Box::from_raw(snapshot.mem);
     |             +++++++

warning: unused return value of `Box::<T>::from_raw` that must be used
    --> lib.rs:1481:13
     |
1481 |             Box::from_raw(snapshot.env);
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: call `drop(Box::from_raw(ptr))` if you intend to drop the `Box`
help: use `let _ = ...` to ignore the resulting value
     |
1481 |             let _ = Box::from_raw(snapshot.env);
     |             +++++++

warning: `icicle` (lib) generated 33 warnings (run `cargo fix --lib -p icicle` to apply 3 suggestions)
    Finished `release` profile [optimized] target(s) in 43.45s
